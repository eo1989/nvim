snippet hr "header"
/* -------------------------------------------------------------------------------
   ${1: Header}
   -------------------------------------------------------------------------------*/
endsnippet
snippet doc "comment"
/**
   ${0}
 */
endsnippet
snippet todo "todo"
/**
   TODO: ${0}
 */
endsnippet
snippet let "assignment"
let ${1} = ${0};
endsnippet
snippet fn "arrow function"
let ${1} = (${2}) => {
  ${0}
};
endsnippet
snippet fun "function statement"
fun ${1} => ${0}
endsnippet
snippet ty "type"
type ${1} = ${0};
endsnippet
snippet mod "module"
module ${1} = {
  ${0}
};
endsnippet
snippet modty "module type"
module type ${1} = {
  ${0}
};
endsnippet
snippet sw "switch"
switch (${1}) {
  | ${2} => ${0}
}
endsnippet
snippet | "pattern match"
| ${1} => ${0}
endsnippet
snippet p "pipe"
|> ${0}
endsnippet
snippet if "if"
if (${1}) {
  ${2}
}
endsnippet
snippet elif "if else"
if (${1}) {
  ${2}
} else {
  ${0}
}
endsnippet
snippet log "print endline"
print_endline("$1: " ++ ${1: value})
endsnippet
snippet describe "rejest test"
test("${1: test description}", () => {
  test("${2: first case}", () => {
    ${3: // Write some test}
  })
})
endsnippet
snippet test "test case"
test("${1: test case}", () => {
    ${2: // Write some test}
    })
endsnippet
snippet expect "expect"
expect(${1:variable}).toEqual(${2:value})
endsnippet
snippet show "show"
[@deriving show]
endsnippet

snippet comp "Revery component" b
open Revery_UI;

let component = React.component("${1:Name}");

let createElement = (~children, ()) => component(hooks => (
  hooks,
  <View>...children</View>
));
endsnippet
